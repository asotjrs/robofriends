{"version":3,"sources":["containers/Card.js","containers/CardList.js","containers/SearchBox.js","containers/Scroll.js","components/ErrorBoundry.js","components/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","onChange","placeholder","type","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","errorInfo","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","result","json","users","SearchField","filteredList","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4NAceA,EAXJ,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,MAAOC,EAAM,EAANA,GACtB,OACI,yBAAKC,UAAW,uDACZ,yBAAKC,IAAK,0BAA0BF,EAAG,YAAaG,IAAK,WACzD,6BACI,4BAAKL,GACL,2BAAIC,MCMLK,EAZA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACb,OACI,6BACOA,EAAOC,KACT,SAACC,EAAKC,GACP,OAAO,kBAAC,EAAD,CAAMC,IAAKJ,EAAOG,GAAGR,GAAIA,GAAIK,EAAOG,GAAGR,GAAID,MAAOM,EAAOG,GAAGT,MAAOD,KAAMO,EAAOG,GAAGV,YCKvFY,EAVC,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC5B,OAAQ,yBAAKX,UAAW,OACtB,2BACEY,SAAUD,EACVX,UAAW,iCACTa,YAAa,gBACfC,KAAM,aCEGC,G,MATF,SAACC,GAEd,OAAO,yBAAKC,MAAO,CAACC,SAAS,SAASC,OAAO,kBAAmBC,OAAO,UAClEJ,EAAMK,YCiBIC,E,kDAnBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAM,CACPC,UAAS,GAHC,E,8DAMAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAIG,KAAKJ,MAAMC,SACP,mEAEJG,KAAKX,MAAMK,a,GAfIQ,aCoDZC,E,kDA9CX,WAAYd,GAAO,IAAD,8BACd,cAAMA,IAcVe,eAAe,SAACC,GACZ,EAAKJ,SAAS,CAAC,YAAcI,EAAMC,OAAOC,SAd1C,EAAKX,MAAM,CACP,OAAS,GACT,YAAc,IAJJ,E,gEAOG,IAAD,OAChBY,MACI,8CAA8CC,MAC9C,SAAAC,GAAM,OAAEA,EAAOC,UAAQF,MACvB,SAAAG,GAAK,OAAE,EAAKX,SAAS,CAAC,OAASW,S,+BAU9B,IAAD,EACuBZ,KAAKJ,MAAzBnB,EADH,EACGA,OAAOoC,EADV,EACUA,YACRC,EACFrC,EAAOsC,QACH,SAAAC,GACI,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASL,EAAYI,kBAIjE,OAAQxC,EAAO0C,OAAkD,yBAAK9C,UAAW,MAC7E,wBAAIA,UAAW,MAAf,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU3B,OAAQqC,OALN,wBAAIzC,UAAW,MAAf,qB,GA/Bd6B,a,MCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.a9422f8d.chunk.js","sourcesContent":["// eslint-disable-next-line no-unused-vars\r\nimport React from \"react\";\r\n\r\nconst Card=({name, email, id})=>{\r\n    return (\r\n        <div className={\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\"}>\r\n            <img src={\"https://robohash.org/${\"+id+\"}?200x200\"} alt={\"robots\"}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Card;","import Card from \"./Card\";\r\nimport React from \"react\";\r\n\r\nconst CardList=({robots})=>{\r\n    return (\r\n        <div>\r\n            {  robots.map(\r\n             (user,i) => {\r\n            return <Card key={robots[i].id} id={robots[i].id} email={robots[i].email} name={robots[i].name}/>;\r\n        }\r\n            )}\r\n        </div>\r\n    );\r\n\r\n};\r\nexport default CardList;","import React from \"react\";\r\n\r\n\r\nconst SearchBox=({searchField,searchChange})=>{\r\n  return (<div className={\"pa2\"}>\r\n    <input\r\n      onChange={searchChange}\r\n      className={\"pa3 b--green bg--lightest-blue\"\r\n      } placeholder={\"search robots\"}\r\n      type={\"search\"}/>\r\n        </div>);\r\n\r\n};\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll=(props)=>{\r\n\r\nreturn <div style={{overflow:\"scroll\",border:'5px solid black', height:'800px'}}>\r\n    {props.children}\r\n</div>;\r\n\r\n\r\n\r\n};\r\nexport default Scroll;\r\n","import React, {Component} from \"react\";\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError)\r\n        {return <h1> Ooooooooooops Something went wrong</h1>;}\r\n\r\n     return this.props.children;\r\n    }\r\n\r\n\r\n}\r\nexport default ErrorBoundry;","import CardList from \"../containers/CardList\";\r\nimport React, {Component} from \"react\";\r\nimport SearchBox from '../containers/SearchBox';\r\nimport \"./App.css\";\r\nimport Scroll from '../containers/Scroll' ;\r\nimport ErrorBoundry from \"./ErrorBoundry\";\r\n\r\nclass App extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            'robots':[],\r\n            'SearchField':''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch(\r\n            \"https://jsonplaceholder.typicode.com/users\").then(\r\n            result=>result.json()).then(\r\n            users=>this.setState({'robots':users}));\r\n\r\n    }\r\n\r\n    onSearchChange=(event)=>{\r\n        this.setState({'SearchField':event.target.value});\r\n\r\n\r\n    };\r\n\r\n    render(){\r\n        const {robots,SearchField}=this.state;\r\n        const filteredList=\r\n            robots.filter(\r\n                robot=>{\r\n                    return robot.name.toLowerCase().includes(SearchField.toLowerCase());\r\n                }\r\n            );\r\n\r\n        return !robots.length ? <h1 className={\"tc\"}>Loading .....</h1> :<div className={\"tc\"}>\r\n            <h1 className={\"f1\"}>Robofriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange}/>\r\n            <Scroll>\r\n                <ErrorBoundry>\r\n                    <CardList robots={filteredList} />\r\n                </ErrorBoundry>\r\n            </Scroll></div>;\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}